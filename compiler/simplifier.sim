#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  converts an abstract syntax tree into its canonical form;
  the generated syntax tree consists only of calls with simple arguments

<using std>
<using compiler>
<using node>

$compiler::simplify_statement ()
$compiler::simplify_expression ()

%defined_names empty_table
%inherited_names empty_table

$temporary_identifier:
  inc &temp_idx
  $id temporary(.name_of "temp__@(temp_idx)")
  -> id

$simplify_input_arguments: (&input_arguments)
  update_each &input_arguments: (&argument)
    cond
      -> argument.is_an_optional_item:
	!argument.is_an_optional_item false
	simplify_expression &argument
	!argument.is_an_optional_item true
      -> argument.is_an_expanded_item:
	!argument.is_an_expanded_item false
	simplify_expression &argument
	!argument.is_an_expanded_item true
      :
	simplify_expression &argument

$simplify_output_arguments: (&output_arguments)
  # the evaluation order must not be changed!
  # check whether temporaries are necessary

  $$final_destinations undefined
  if output_arguments.is_defined:
    $$first_temporary_index undefined
    do: (-> break)
      for_each output_arguments: (idx argument)
	unless
	  ||
	    not(argument.is_a_function_call)
	    &&
	      argument.is_a_single_assign_definition
	      length_of(output_arguments) == 1
	    argument.is_a_multi_assign_definition
	    #&&
	      argument.is_a_function_call
	      functor_of(argument).is_used_as_a_polymorphic_function
	  :
	    !first_temporary_index idx
	    break
    if first_temporary_index.is_defined:
      !final_destinations empty_list
      update_each &output_arguments:
	(
	  idx
	  &argument
	)
	if
	  idx < first_temporary_index || argument.is_a_temporary:
	    push &final_destinations undefined
	  :
	    $$temp temporary_identifier()
	    cond
	      -> argument.is_an_optional_item:
		!argument.is_an_optional_item false
		!temp.is_an_optional_item true
	      -> argument.is_an_expanded_item:
		!argument.is_an_expanded_item false
		!temp.is_an_expanded_item true
	    push &final_destinations argument
	    !argument temp(.is_a_destination true)
  -> final_destinations

$compiler::check_usage: (name definition info)
  case variable_kind_of(definition)
    POLYMORPHIC:
      case variable_kind_of(info) STATIC_MULTI, DYNAMIC_SINGLE, DYNAMIC_MULTI:
	SyntaxError identifier_of(info) "
	  Invalid access to polymorphic function "@(name)@quot;@
    STATIC_SINGLE:
      case
	variable_kind_of(info)
	STATIC_MULTI, DYNAMIC_SINGLE, DYNAMIC_MULTI, POLYMORPHIC:
	  SyntaxError identifier_of(info) "
	    Invalid access to read-only variable "@(name)@quot;@
    STATIC_MULTI:
      case variable_kind_of(info) DYNAMIC_SINGLE, DYNAMIC_MULTI, POLYMORPHIC:
	SyntaxError identifier_of(info) "
	  Invalid access to static read-write variable "@(name)@quot;@
    DYNAMIC_SINGLE:
      case
	variable_kind_of(info)
	POLYMORPHIC, STATIC_MULTI, DYNAMIC_MULTI, POLYMORPHIC:
	  SyntaxError identifier_of(info) "
	    Invalid access to dynamic read-only variable "@(name)@quot;@
    DYNAMIC_MULTI:
      case variable_kind_of(info) POLYMORPHIC, DYNAMIC_SINGLE, POLYMORPHIC:
	SyntaxError identifier_of(info) "
	  Invalid access to dynamic read-write variable "@(name)@quot;@

###
# DEFAULT GRAMMAR NODE

$types::grammar_node/simplify_statement: (self)
  show_compiler_debug_info "simplify statement (default)"
  push &statements self

$types::grammar_node/simplify_expression: (&_self)
  show_compiler_debug_info "simplify expression (default)"

###
# IDENTIFIER

$compiler::identifier/simplify_expression: (&self)
  show_compiler_debug_info "simplify identifier"
  if namespace_of(self).is_undefined:
    $constant named_constants(name_of(self))
    if constant.is_defined: !self constant

###
# BODY

$compiler::body/simplify_expression: (&self)
  show_compiler_debug_info "simplify body"
  if
    &&
      parameters_of(self).is_empty
      length_of(statements_of(self)) == 1
      arguments_of(statements_of(self)(1)).is_empty
      functor_of(statements_of(self)(1)).is_an_identifier
    :
      # trivial body

      !self simplify_expression(functor_of(statements_of(self)(1)))
    :
      $$all_defined_names already_defined_names
      for_each defined_names_of(self): (name info)
	$outer_info already_defined_names(name)
	if
	  outer_info.is_defined:
	    SyntaxError identifier_of(info) "
	      An identifier named "@(name)" was already defined in an outer @
	      scope or in a used namespace@
	  :
	    !all_defined_names(name) info
      for_each used_names_of(self): (name info)
	$definition all_defined_names(name)
	if definition.is_defined:
	  check_usage name definition info
	  if defined_names(name).is_defined || inherited_names(name).is_defined:
	    !self.inherited_names_of(name) info
      do:
	%defined_names defined_names_of(self)
	%inherited_names inherited_names_of(self)
	%already_defined_names all_defined_names
	%%definitions empty_list
	%%statements empty_list
	$$max_temp_idx 0
	update_each &self.parameters_of: (&parameter)
	  $$default_value default_value_of(parameter)
	  if default_value.is_defined:
	    if
	      default_value.is_a_function_call:
		%%statements empty_list
		%%compiler::temp_idx 0
		$identifier identifier_of(parameter)
		simplify_statement
		  assignment
		    .arguments_of
		      list(parameter(.is_an_optional_item false) default_value)
		    .fragment_of fragment_of(identifier)
		    .source_position_of source_position_of(identifier)
		    .end_position_of end_position_of(identifier)
		extend_to &max_temp_idx temp_idx
		!parameter.statements_of statements
	      :
		simplify_expression &default_value
		!parameter.default_value_of default_value

	# first add all constant definitions

	for_each statements_of(self): (statement)
	  unless statement.is_a_remark:
	    if
	      &&
		statement.is_an_assignment
		arguments_of(statement)(1).is_a_static_single_definition
		arguments_of(statement)(2).is_a_constant
	      :
		%%compiler::temp_idx 0
		simplify_statement statement
		extend_to &max_temp_idx temp_idx

	# then add all other statements

	for_each statements_of(self): (statement)
	  unless statement.is_a_remark:
	    unless
	      &&
		statement.is_an_assignment
		arguments_of(statement)(1).is_a_static_single_definition
		arguments_of(statement)(2).is_a_constant
	      :
		%%compiler::temp_idx 0
		simplify_statement statement
		extend_to &max_temp_idx temp_idx
	!self.definitions_of definitions
	!self.statements_of statements
	!self.temporary_count_of max_temp_idx
      unless inherited_names_of(self).is_empty:
	#
	  a closure must be created in a separate step because it is not really
	  a constant

	$temp temporary_identifier()
	push
	  &statements
	  assignment
	    .arguments_of list(temp(.is_a_destination true) self)
	    .fragment_of fragment_of(self)
	    .source_position_of source_position_of(self)
	    .end_position_of end_position_of(self)
	!self temp

###
# CALL

$do_store: (functor $arguments $result rest $infos)
  pop &infos $info
  if
    arguments.is_a_list:
      update_each &arguments: (&argument) simplify_expression &argument
      if length_of(rest) > 0:
	$temp temporary_identifier()
	push
	  &statements
	  procedure_call
	    .functor_of functor
	    .arguments_of put(arguments temp(.is_a_destination true))
	    .fragment_of fragment_of(info)
	    .source_position_of source_position_of(info)
	    .end_position_of end_position_of(info)
	do_store temp rest.peek result rest.drop infos
	!result temp
      push
	&statements
	procedure_call
	  .functor_of functor
	  .arguments_of
	    push
	      put(arguments functor(.is_a_destination true))
	      result(.is_a_destination false)
	  .fragment_of fragment_of(info)
	  .source_position_of source_position_of(info)+1
	  .end_position_of end_position_of(info)
    :
      if length_of(rest) > 0:
	$temp temporary_identifier()
	push
	  &statements
	  procedure_call
	    .functor_of functor_of(arguments)
	    .arguments_of list(temp(.is_a_destination true) functor)
	    .fragment_of fragment_of(info)
	    .source_position_of source_position_of(info)
	    .end_position_of end_position_of(info)
	do_store temp rest.peek result rest.drop infos
	!result temp

      $attribute_pair
	if
	  arguments.is_a_method_definition
	  -> attribute_function_pair
	  -> attribute_value_pair

      push
	&statements
	assignment
	  .arguments_of
	    list
	      functor(.is_a_destination true)
	      attribute_pair
		.identifier_of functor_of(arguments)
		.arguments_of list(result)
	  .fragment_of fragment_of(info)
	  .source_position_of source_position_of(info)+1
	  .end_position_of end_position_of(info)

$store_result:
  (
    destination
    result
    rest = empty_list
    $infos = empty_list
  )
  push &infos destination
  $arguments arguments_of(destination)
  if
    destination.is_an_attribute_access:
      if
	arguments(1).is_an_identifier:
	  do_store arguments(1) destination result rest infos
	:
	  store_result arguments(1) result push(rest destination) infos
    :
      $functor functor_of(destination)
      if
	functor.is_an_identifier:
	  do_store functor arguments result rest infos
	:
	  store_result functor result push(rest arguments) infos

$compiler::call/simplify_statement:
  (
    $self
    -> return
  )
  show_compiler_debug_info "simplify statement"
  $$output_arguments empty_list
  $$input_arguments empty_list

  $add_arguments: (arguments)
    for_each arguments: ($argument)
      cond
	-> argument.is_an_input_output_argument:
	  !argument.is_an_input_output_argument false
	  push &output_arguments argument
	  push &input_arguments argument(.is_a_destination false)
	-> argument.is_a_destination: push &output_arguments argument
	:
	  push &input_arguments argument

  add_arguments arguments_of(self)
  if self.is_an_assignment && length_of(input_arguments) == 1:
    $source input_arguments(1)
    if source.is_a_function_call:
      $destination output_arguments(1)
      !output_arguments empty_list
      !input_arguments empty_list
      add_arguments arguments_of(source)
      push &output_arguments destination
      !self
	procedure_call
	  .functor_of functor_of(source)
	  .fragment_of fragment_of(self)
	  .source_position_of source_position_of(self)
	  .end_position_of end_position_of(self)
  simplify_input_arguments &input_arguments

  $final_destinations
    if
      self.is_an_assignment
      -> undefined
      -> simplify_output_arguments(&output_arguments)

  if functor_of(self).is_defined:
    if result_count_of(self).is_defined:
      simplify_expression &self.result_count_of
    if continuation_of(self).is_defined:
      simplify_expression &self.continuation_of
    simplify_expression &self.functor_of
  if
    self.is_an_assignment:
      $destination output_arguments(1)
      if destination.is_a_definition:
	if
	  destination.is_a_single_assign_definition:
	    $source input_arguments(1)
	    if attribute_kind_of(destination) != NONE:
	      push &definitions destination = source
	      return
	    cond
	      -> source.is_a_constant || source.is_single_assign:
		push &definitions destination = source
		return
	      -> source.might_be_constant:
		push &definitions destination = source
		!output_arguments(1).is_an_initialization true
	      :
		push &definitions destination
		!output_arguments(1).is_an_initialization true
	  :
	    push &definitions destination
	    !output_arguments(1).is_an_initialization true
      if
	destination.is_a_function_call:
	  store_result destination input_arguments(1)
	:
	  !self.arguments_of append(output_arguments input_arguments)
	  push &statements self
      return
    :
      update_each &output_arguments: (&argument)
	if argument.is_a_definition:
	  push &definitions argument
	  !argument.is_an_initialization true
  !self.arguments_of append(output_arguments input_arguments)
  push &statements self
  if final_destinations.is_defined:
    for_each final_destinations: (idx destination)
      if destination.is_defined:
	$result
	  output_arguments(idx)
	    .is_an_optional_item false
	    .is_an_expanded_item false
	    .is_a_destination false

	if
	  destination.is_a_function_call:
	    store_result destination result
	  :
	    #
	      ATTENTION: strange - only two source code files have destinations
	      that actually are identifier nodes - maybe an error in the AST?

	    $identifier
	      if
		destination.is_an_identifier
		-> destination
		-> identifier_of(destination)

	    simplify_statement
	      assignment
		.arguments_of list(destination result)
		.fragment_of fragment_of(identifier)
		.source_position_of source_position_of(identifier)
		.end_position_of end_position_of(identifier)

###
# FUNCTION CALL

$compiler::function_call/simplify_expression: (self)
  show_compiler_debug_info "simplify function call"
  $temp temporary_identifier()
  simplify_statement
    procedure_call
      .functor_of functor_of(self)
      .arguments_of push(arguments_of(self) temp(.is_a_destination true))
      .fragment_of fragment_of(self)
      .source_position_of source_position_of(self)
      .end_position_of end_position_of(self)
  -> temp

###
# ATTRIBUTE VALUE PAIR

$compiler::attribute_value_pair/simplify_expression: (&self)
  show_compiler_debug_info "simplify attribute-value pair"
  simplify_input_arguments &self.arguments_of
    # There must not be any output arguments!!!

###
# ATTRIBUTE FUNCTION PAIR

$compiler::attribute_function_pair/simplify_expression: (&self)
  show_compiler_debug_info "simplify attribute-function pair"
  simplify_input_arguments &self.arguments_of
    # There must not be any output arguments!!!

###
# C-CODE

$compiler::c_code/simplify_statement: (self)
  show_compiler_debug_info "simplify C-code"
  push &actions: !use_inline_c true
  case kind_of(self)
    "struct":
      $name name_of(identifier_of(self))
      push &actions: !defined_structs(name) true
    "node":
      $name name_of(identifier_of(self))
      push &actions: !defined_nodes(name) self
    "function":
      $name behind(source_of(self) .before. '(' alt(' ' '*') -1)
      push &actions: !defined_functions(name) true
  push &definitions self

###
# C-BODY

$compiler::c_body/simplify_expression: (&_self)
  show_compiler_debug_info "simplify C-body"
  push &actions: !use_inline_c true
