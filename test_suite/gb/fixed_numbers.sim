{
  #define DIM_G68077F6L15RPXMT45H0WNC49(array) (sizeof(array) / sizeof *(array))
}

{
  <kind struct>
  <name NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49>
  uint64_t oid;
  uint64_t scale;
  uint8_t fractional_digits;
  uint8_t base;
  uint8_t grouping;
  uint32_t comma_symbol;
  uint32_t group_separator;
}

{
  <kind function>
  <name collect_number_specs_g68077f6l15rpxmt45h0wnc49>
  NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49
    *collect_number_specs_g68077f6l15rpxmt45h0wnc49(
      NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49 *specs
  ) {
    if (!IS_COLLECTED(specs)) return specs;
    if (specs->base == 0) return *(void **)specs;
    NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49 *new_specs;
    new_specs= allocate(sizeof *new_specs);
    *new_specs= *specs;
    *(void **)specs= new_specs;
    specs->base= 0;
    return new_specs;
  }
}

{
  <kind node>
  <name NUMBER_G68077F6L15RPXMT45H0WNC49>
  int64_t value;
  NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49 *specs;
}

{
  <kind type>
  <name proto_number_g68077f6l15rpxmt45h0wnc49::fixed>
  <node NUMBER_G68077F6L15RPXMT45H0WNC49>
  <base types::number>
  <argument 0>
  <argument NULL>
  RUNTIME_ERROR("Attempt to call a fixed number value as a function!")
}

$proto_number_g68077f6l15rpxmt45h0wnc49::fixed/is_defined: (self) -> true

{
  <kind function>
  <name pow_uint64_g68077f6l15rpxmt45h0wnc49>
  uint64_t pow_uint64_g68077f6l15rpxmt45h0wnc49(
    uint64_t base, unsigned exponent
  ) {
    if (exponent == 0) return 1;
    if (exponent == 1) return base;
    uint64_t z= pow_uint64_g68077f6l15rpxmt45h0wnc49(base, exponent >> 1);
    z*= z;
    if (exponent & 1) z*= exponent;
    return z;
  }
}

$create_fixed {
  CHECK_ARGUMENTS(5)
  NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49 *specs;
  allocate_arguments();
  specs= allocate_gc(sizeof *specs);
  {
    static uint64_t next_id;
    specs->oid= ++next_id;
  }
  specs->fractional_digits= to_uint8(ARGUMENTS(0));
  specs->base= to_uint8(ARGUMENTS(1));
  specs->grouping= to_uint8(ARGUMENTS(2));
  specs->comma_symbol= to_uchar32(ARGUMENTS(3));
  specs->group_separator= to_uchar32(ARGUMENTS(4));
  specs->scale=
    pow_uint64_g68077f6l15rpxmt45h0wnc49(specs->base, specs->fractional_digits)
  ;
  RETURN_SINGLE_RESULT(
    create__proto_number_g68077f6l15rpxmt45h0wnc49__fixed(0, specs)
  );
}

$set_value {
  CHECK_ARGUMENTS(2)
  if (TYPEOF(ARGUMENTS(0)) != TYPE(proto_number_g68077f6l15rpxmt45h0wnc49::fixed))
    INVALID_ARGUMENTS_ERROR
  RETURN_SINGLE_RESULT(
    create__proto_number_g68077f6l15rpxmt45h0wnc49__fixed(
      to_uint64(ARGUMENTS(1)),
      ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.specs
    )
  );
}

$number_g68077f6l15rpxmt45h0wnc49::fixed:
  (
    fractional_digits
    base=10
    grouping=3
    comma_symbol='.'
    group_separator=0
  )
  $prototype
    create_fixed(fractional_digits base grouping comma_symbol group_separator)
  ->
    : (str)
      $$value 0
      $$after_comma_digits undefined
      for_each str: (chr)
	if
	  chr == '.':
	    !after_comma_digits 0
	  :
	    times &value base
	    if after_comma_digits.is_defined: plus &after_comma_digits 1
	    case chr
	      '0' .. '9':
		plus &value (chr - '0')
	      'a' .. 'z':
		plus &value (chr - 'a' + 10)
	      'A' .. 'Z':
		plus &value (chr - 'A' + 10)
      unless after_comma_digits.is_defined: !after_comma_digits 0
      if after_comma_digits > fractional_digits:
	Error "Too many fractional digits in fixed point number!"
      repeat (fractional_digits - after_comma_digits): times &value base
      -> set_value(prototype value)

$proto_number_g68077f6l15rpxmt45h0wnc49::fixed/to_string {
  CHECK_ARGUMENTS(1)
  NUMBER_G68077F6L15RPXMT45H0WNC49 *iv;
  char buf[160], sep;
  uint64_t v;
  unsigned i, j, base, nsep;
  iv= (NUMBER_G68077F6L15RPXMT45H0WNC49*)ARGUMENTS(0);
  NUMBER_SPECS_G68077F6L15RPXMT45H0WNC49 *specs=  iv->specs;
  v= iv->value;
  base= specs->base;
  i= DIM_G68077F6L15RPXMT45H0WNC49(buf);
  buf[--i]= '\0';
  for (j= specs->fractional_digits; j--; ) {
    int c;
    if ((c= v % base) > 9) c+= 'a' - ('9' + 1);
    buf[--i]= (char)(unsigned char)(c + '0');
    v/= base;
  }
  if (specs->fractional_digits) buf[--i]= specs->comma_symbol;
  nsep= (sep= specs->group_separator) ? specs->grouping : 0;
  j= 0;
  do {
    int c;
    if (j++ == nsep) {
      buf[--i]= sep;
      j= 0;
    }
    if ((c= v % base) > 9) c+= 'a' - ('9' + 1);
    buf[--i]= (char)(unsigned char)(c + '0');
  } while (v/= base);
  RETURN_SINGLE_RESULT(from_c_string(buf + i));
}

$proto_number_g68077f6l15rpxmt45h0wnc49::fixed/plus {
  CHECK_ARGUMENTS(2);
  uint64_t r;
  if (
	TYPEOF(ARGUMENTS(1)) != TYPE(proto_number_g68077f6l15rpxmt45h0wnc49::fixed)
    ||      ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.specs->oid
	!=  ARGUMENTS(1)->number_g68077f6l15rpxmt45h0wnc49.specs->oid
  ) INVALID_ARGUMENTS_ERROR
  int64_t left = ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.value;
  int64_t right = ARGUMENTS(1)->number_g68077f6l15rpxmt45h0wnc49.value;
  int64_t result = left+right;
  if (!((left^right) & 0x8000000000000000ULL)) {
    if ((left^result) & 0x8000000000000000ULL) {
      RUNTIME_ERROR("Numeric overflow!")
    }
  }
  RETURN_SINGLE_RESULT(
    create__proto_number_g68077f6l15rpxmt45h0wnc49__fixed(
      result, ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.specs
    )
  );
}

$proto_number_g68077f6l15rpxmt45h0wnc49::fixed/negate {
  CHECK_ARGUMENTS(1);
  uint64_t r;
  if (
	ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.value
    ==  0x8000000000000000ULL
  ) RUNTIME_ERROR("Numeric overflow!")
  RETURN_SINGLE_RESULT(
    create__proto_number_g68077f6l15rpxmt45h0wnc49__fixed(
	-ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.value
      , ARGUMENTS(0)->number_g68077f6l15rpxmt45h0wnc49.specs
    )
  );
}
