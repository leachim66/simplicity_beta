#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

$std::is_an_iterator ()
  #
    checks whether an object is an iterator or not

$types::object.is_an_iterator false # obvious
$types::iterator.is_an_iterator true # obvious

$types::iterator types::object
  #
    prototype object for all kinds of iterators

$types::iterator/for_each:
  #
    invokes a callback for each item
  (
    $myself
    body
  )
  if
    parameter_count_of(body) == 2:
      from_to 1 length_of(myself): (idx) body idx next(&myself)
    :
      repeat length_of(myself): body next(&myself)
