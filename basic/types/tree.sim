#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

$std::is_an_insert_order_tree () # obvious

$types::object.is_an_insert_order_tree false # obvious
$types::insert_order_tree.is_an_insert_order_tree true # obvious

$NONE .

$table_of (!)

$types::object.table_of empty_table

$types::generic_tree types::object
  #
    the prototype object for all kinds of trees

$types::tree types::generic_tree
  #
    the prototype object for trees

$types::key_order_tree types::generic_tree
  #
    the prototype object for key-order trees

$types::insert_order_tree types::generic_tree
  #
    the prototype object for insert-order trees

$types::tree.serialization_tag_of "tree"
  #
    the serialization tag for trees

$types::key_order_tree.serialization_tag_of "key_order_tree"
  #
    the serialization tag for key-order trees

$types::insert_order_tree.serialization_tag_of "insert_order_tree"
  #
    the serialization tag for insert-order trees

$retrieve_item: (myself keys)
  $key keys(1)
  $node table_of(myself)(key)
  $more_keys range(keys 2 -1)
  if
    more_keys.is_empty
    -> node
    -> retrieve_item(node more_keys)

$insert_item:
  (
    &myself
    keys
    value
  )
  $key keys(1)
  $more_keys range(keys 2 -1)
  if
    more_keys.is_empty:
      !myself.table_of(key) value
    :
      $$node table_of(myself)(key)
      insert_item &node more_keys value
      !myself.table_of(key) node

$insert_item_in_key_order:
  (
    &myself
    keys
    value
  )
  $key keys(1)
  $more_keys range(keys 2 -1)
  if table_of(myself).is_empty: !myself.table_of empty_key_order_table
  if
    more_keys.is_empty:
      !myself.table_of(key) value
    :
      $$node table_of(myself)(key)
      insert_item_in_key_order &node more_keys value
      !myself.table_of(key) node

$insert_item_in_insert_order:
  (
    &myself
    keys
    value
  )
  $key keys(1)
  $more_keys range(keys 2 -1)
  if table_of(myself).is_empty: !myself.table_of empty_insert_order_table
  if
    more_keys.is_empty:
      !myself.table_of(key) value
    :
      $$node table_of(myself)(key)
      insert_item_in_insert_order &node more_keys value
      !myself.table_of(key) node

$types::tree/:
  #
    retrieve or add an item
  (
    $myself^
    key
    value = NONE
  )
  case
    value
    NONE:
      if
	key.is_a_list
	-> retrieve_item(myself key)
	-> table_of(myself)(key)
    :
      if
	key.is_a_list:
	  insert_item &myself key value
	:
	  !myself.table_of(key) value
      -> myself

$types::key_order_tree/:
  #
    retrieve or add an item
  (
    $myself^
    key
    value = NONE
  )
  case
    value
    NONE:
      if
	key.is_a_list
	-> retrieve_item(myself key)
	-> table_of(myself)(key)
    :
      if
	key.is_a_list:
	  insert_item_in_key_order &myself key value
	:
	  if table_of(myself).is_empty: !myself.table_of empty_key_order_table
	  !myself.table_of(key) value
      -> myself

$types::insert_order_tree/:
  #
    retrieve or add an item
  (
    $myself^
    key
    value = NONE
  )
  case
    value
    NONE:
      if
	key.is_a_list
	-> retrieve_item(myself key)
	-> table_of(myself)(key)
    :
      if
	key.is_a_list:
	  insert_item_in_insert_order &myself key value
	:
	  if table_of(myself).is_empty:
	    !myself.table_of empty_insert_order_table
	  !myself.table_of(key) value
      -> myself

$insert_item_before:
  (
    &table
    keys
    new_key
    new_value
  )
  $key keys(1)
  $more_keys range(keys 2 -1)
  if
    more_keys.is_empty:
      insert_before &table key new_key new_value
    :
      $$node table(key)
      insert_item_before &node.table_of more_keys new_key new_value
      !table(key) node

$types::insert_order_tree/insert_before:
  #
    inserts an item before another item
  (
    &self
    key
    new_key
    new_value
  )
  if
    key.is_a_list:
      insert_item_before &self.table_of key new_key new_value
    :
      insert_before &self.table_of key new_key new_value

$insert_item_behind:
  (
    &table
    keys
    new_key
    new_value
  )
  $key keys(1)
  $more_keys range(keys 2 -1)
  if
    more_keys.is_empty:
      insert_behind &table key new_key new_value
    :
      $$node table(key)
      insert_item_behind &node.table_of more_keys new_key new_value
      !table(key) node

$types::insert_order_tree/insert_behind:
  #
    inserts an item behind another item
  (
    &self
    key
    new_key
    new_value
  )
  if
    key.is_a_list:
      insert_item_behind &self.table_of key new_key new_value
    :
      insert_behind &self.table_of key new_key new_value

$std::tree_nodes_of:
  #
    returns a table containing all of the tree's nodes
  (
    self
  )
  -> table_of(self) # allows only read-access

$total_node_count_of: (self)
  $$n 1
  for_each table_of(self): (item) plus &n total_node_count_of(item)
  -> n

$std::node_count_of:
  #
    returns the total number of nodes within the tree
  (
    self
  )
  -> total_node_count_of(self)-1

$std::subnode_count_of:
  #
    returns the number of direct child nodes
  (
    self
  )
  -> length_of(table_of(self))

$std::leaf_count_of:
  #
    returns the total number of leaf nodes
  (
    self
  )
  if
    table_of(self).is_empty
    -> 1
    :
      $$n 0
      for_each table_of(self): (item) plus &n leaf_count_of(item)
      -> n

$std::for_each_subnode:
  #
    iterates over all direct child nodes
  (
    self
    body
  )
  for_each table_of(self): (key item) body key item

$std::for_each_node_do:
  #
    iterates over all nodes in the tree
  (
    keys
    node
    body
  )
  body keys node
  for_each table_of(node): (key item) for_each_node_do push(keys key) item body

$std::for_each_node:
  #
    iterates over all nodes in the tree
  (
    self
    body
  )
  for_each table_of(self): (key item) for_each_node_do list(key) item body

$std::for_each_leaf_do:
  #
    iterates over all leaf nodes
  (
    keys
    node
    body
  )
  if
    table_of(node).is_empty:
      body keys node
    :
      for_each table_of(node): (key item)
	for_each_leaf_do push(keys key) item body

$std::for_each_leaf:
  #
    iterates over all leaf nodes
  (
    self
    body
  )
  for_each table_of(self): (key item) for_each_leaf_do list(key) item body

$std::for_each_leaf_from_to_do:
  #
    iterates over all leaf nodes in the specified range
  (
    keys
    node
    first_keys
    last_keys
    body
  )
  $table table_of(node)
  if
    table.is_empty:
      body keys node
    :
      $first_key
	if
	  first_keys.is_defined
	  -> first_keys(1)
	  -> undefined

      $last_key
	if
	  last_keys.is_defined
	  -> last_keys(1)
	  -> undefined

      for_each_from_to table first_key last_key: (key item)
	for_each_leaf_from_to_do
	  keys .push. key
	  item
	  if
	    key == first_key
	    -> range(first_keys 2 -1)
	    -> undefined
	  if
	    key == last_key
	    -> range(last_keys 2 -1)
	    -> undefined
	  body

$std::for_each_leaf_from_to:
  #
    iterates over all leaf nodes in the specified range
  (
    self
    first_keys
    last_keys
    body
  )
  unless table_of(self).is_empty:
    for_each_leaf_from_to_do empty_list self first_keys last_keys body

$std::for_each_leaf_from_down_to_do:
  #
    iterates over all leaf nodes in the specified range in reverse order
  (
    keys
    node
    last_keys
    first_keys
    body
  )
  $table table_of(node)
  if
    table.is_empty:
      body keys node
    :
      $last_key
	if
	  last_keys.is_defined
	  -> last_keys(1)
	  -> undefined

      $first_key
	if
	  first_keys.is_defined
	  -> first_keys(1)
	  -> undefined

      for_each_from_down_to table last_key first_key: (key item)
	for_each_leaf_from_down_to_do
	  keys .push. key
	  item
	  if
	    key == last_key
	    -> range(last_keys 2 -1)
	    -> undefined
	  if
	    key == first_key
	    -> range(first_keys 2 -1)
	    -> undefined
	  body

$std::for_each_leaf_from_down_to:
  #
    iterates over all leaf nodes in the specified range in reverse order
  (
    self
    last_keys
    first_keys
    body
  )
  unless table_of(self).is_empty:
    for_each_leaf_from_down_to_do empty_list self last_keys first_keys body

$std::update_each_subnode:
  #
    updates all direct subnodes
  (
    &self
    body
  )
  update_each table_of(&self):
    (
      key
      &item
    )
    body key &item

$std::update_each_node_do:
  #
    updates all tree nodes
  (
    keys
    &node
    body
  )
  body keys &node
  update_each &node.table_of:
    (
      key
      &item
    )
    update_each_node_do push(keys key) &item body

$std::update_each_node:
  #
    updates all tree nodes
  (
    &self
    body
  )
  update_each &self.table_of:
    (
      key
      &item
    )
    update_each_node_do list(key) &item body

$std::update_each_leaf_do:
  #
    updates all leaf nodes
  (
    keys
    &node
    body
  )
  if
    table_of(node).is_empty:
      body keys &node
    :
      update_each &node.table_of:
	(
	  key
	  &item
	)
	update_each_leaf_do push(keys key) &item body

$std::update_each_leaf:
  #
    updates all leaf nodes
  (
    &self
    body
  )
  update_each &self.table_of:
    (
      key
      &item
    )
    update_each_leaf_do list(key) &item body

$std::update_each_leaf_from_to_do:
  #
    updates all leaf nodes in the specified range
  (
    keys
    &node
    first_keys
    last_keys
    body
  )
  if
    table_of(node).is_empty:
      body keys node
    :
      $first_key
	if
	  first_keys.is_defined
	  -> first_keys(1)
	  -> undefined

      $last_key
	if
	  last_keys.is_defined
	  -> last_keys(1)
	  -> undefined

      update_each_from_to &node.table_of first_key last_key:
	(
	  key
	  &item
	)
	update_each_leaf_from_to_do
	  keys .push. key
	  &item
	  if
	    key == first_key
	    -> range(first_keys 2 -1)
	    -> undefined
	  if
	    key == last_key
	    -> range(last_keys 2 -1)
	    -> undefined
	  body

$std::update_each_leaf_from_to:
  #
    updates all leaf nodes in the specified range
  (
    &self
    first_keys
    last_keys
    body
  )
  unless table_of(self).is_empty:
    update_each_leaf_from_to_do empty_list &self first_keys last_keys body

$std::update_each_leaf_from_down_to_do:
  #
    updates all leaf nodes in the specified range in reverse order
  (
    keys
    &node
    last_keys
    first_keys
    body
  )
  if
    table_of(node).is_empty:
      body keys node
    :
      $last_key
	if
	  last_keys.is_defined
	  -> last_keys(1)
	  -> undefined

      $first_key
	if
	  first_keys.is_defined
	  -> first_keys(1)
	  -> undefined

      update_each_from_down_to &node.table_of last_key first_key:
	(
	  key
	  &item
	)
	update_each_leaf_from_down_to_do
	  keys .push. key
	  &item
	  if
	    key == last_key
	    -> range(last_keys 2 -1)
	    -> undefined
	  if
	    key == first_key
	    -> range(first_keys 2 -1)
	    -> undefined
	  body

$std::update_each_leaf_from_down_to:
  #
    updates all leaf nodes in the specified range in reverse order
  (
    &self
    last_keys
    first_keys
    body
  )
  unless table_of(self).is_empty:
    update_each_leaf_from_down_to_do empty_list &self last_keys first_keys body

$serialize_tree: (node indent)
  for_each table_of(node): (key item)
    write "@nl;@(indented(indent serialize(key))) ="
    $serialized_value serialize(item)
    if
      serialized_value .contains. '@nl;':
	write "@nl;@(indented(4 serialized_value))"
      :
	write ' ' serialized_value
    unless table_of(item).is_empty: serialize_tree item indent+2

$types::generic_tree/serialize:
  #
    converts the tree to a machine readable string
  (
    self
    indent?
  )
  $tag serialization_tag_of(self)
  if
    table_of(self).is_empty
    -> "@(tag)()"
    ->
      append
	tag
	collect_output
	  :
	    serialize_tree self indent+2

$std::empty_tree types::tree # an empty tree
$std::empty_key_order_tree types::key_order_tree # an empty key-order tree

$std::empty_insert_order_tree types::insert_order_tree
  # an empty insert-order tree
