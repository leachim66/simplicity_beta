#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<include string.h>

$std::is_a_list ()

$types::object.is_a_list false
$types::list.is_a_list true

#$types::generic_list types::object

# ATTENTION: Currently there is no way to declare an abstract type!

{
  <kind type>
  <name types::generic_list>
  <node SIMPLE_NODE>
  <base types::object>

  RUNTIME_ERROR("Attempt to call the generic list prototype as a function!")
}

{
  <kind struct>
  <name LIST_DATA>

  long size;
  long length;
  NODE **items;
}

{
  <kind function>

  LIST_DATA *collect_list_data(LIST_DATA *data) {
    if (IS_COLLECTED(data)) {
      void *new_location = *(void **)data;
      if (IS_AN_INVALID_LENGTH(new_location)) return DECODE_FROM_LENGTH(new_location);
      LIST_DATA *new_data = allocate(sizeof(LIST_DATA));
      long n = data->length;
      *(void **)data = ENCODE_TO_LENGTH(new_data);
      new_data->size = n;
      new_data->length = n;
      new_data->items = allocate(n*sizeof(NODE *));
      int i;
      for (i = 0; i < n; ++i) {
        new_data->items[i] = collect_node(data->items[i]);
      }
      return new_data;
    } else if (data && !IS_STATIC(data)) {
      MARK(data)
      int i;
      for (i = 0; i < data->length; ++i) {
        data->items[i] = collect_node(data->items[i]);
      }
    }
    return data;
  }
}

{
  <kind node>
  <name LIST>

  long length;
  LIST_DATA *data;
}

{
  <kind type>
  <name types::list>
  <node LIST>
  <base types::generic_list>
  <scope extern>
  <argument 0>
  <argument NULL>

  MIN_ARGUMENTS(1)
  MAX_ARGUMENTS(2)
  long length = myself->list.length;
  long idx = to_long(ARGUMENTS(0));
  if (idx < 0) idx = length+idx+1;
  if (idx < 1 || idx > length) INVALID_INDEX_ERROR
  if (ARGUMENT_COUNT == 1) RETURN_SINGLE_RESULT(myself->list.data->items[idx-1])
  NODE *item = ARGUMENTS(1);
  LIST_DATA *new_data = allocate_large(sizeof(LIST_DATA)+length*sizeof(NODE *));
  new_data->items = (void *)(new_data+1);
  memcpy(new_data->items, myself->list.data->items, length*sizeof(NODE *));
  new_data->items[idx-1] = item;
  new_data->size = length;
  new_data->length = length;
  RETURN_SINGLE_RESULT(create__types__list(length, new_data))
}

{
  <kind object>
  <name std::empty_list>
  <type types::list>
  <argument 0>
  <argument NULL>
}

{
  <kind function>
  <scope runtime>

  NODE *from_arguments(int first_idx, int count) {
    if (count <= 0) return VAR(std::empty_list);
    LIST_DATA *data = allocate(sizeof(LIST_DATA));
    data->size = count;
    data->length = count;
    data->items = arguments->slots+first_idx;
    return create__types__list(count, data);
  }
}

{
  <kind function>

  void types::list/unfold(NODE *list) {
    int i;
    for (i = 0; i < list->list.length; ++i) {
      arguments->slots[ARGUMENT_COUNT++] = list->list.data->items[i];
    }
  }
}

{
  <kind function>

  long types::list/length_of(NODE *node) {
    return node->list.length;
  }
}

{
  <kind function>

  NODE *types::list/get_item_of(NODE *node, long idx) {
    return node->list.data->items[idx];
  }
}

$types::list/to_list: (self) -> self

$std::list
  {
    MIN_ARGUMENTS(0)
    LIST_DATA *data = NULL;
    if (ARGUMENT_COUNT > 0) {
      node_p += sizeof(FRAME)-sizeof(LIST_DATA);
      data = allocate(sizeof(LIST_DATA)); // <data> replaces the argument list header!
      data->size = ARGUMENT_COUNT;
      data->length = ARGUMENT_COUNT;
      data->items = node_p;
      allocate(ARGUMENT_COUNT*sizeof(NODE *)); // let <node_p> skip the items
    }
    RETURN_SINGLE_RESULT(create__types__list(ARGUMENT_COUNT, data))
  }

$types::list/length_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->list.length))
  }

$types::list/push
  {
    CHECK_ARGUMENTS(2)
    NODE *right = ARGUMENTS(1);
    NODE *left = ARGUMENTS(0);
    long left_length = left->list.length;
    long new_length = left_length+1;
    LIST_DATA *data = left->list.data;
    if (!data || data->size < new_length || data->length != left_length) {
      long new_size = ALLOCATION_SIZE(2*new_length);
      LIST_DATA *new_data = allocate_large(sizeof(LIST_DATA)+new_size*sizeof(NODE *));
      new_data->items = (void *)(new_data+1);
      if (data) memcpy(new_data->items, data->items, left_length*sizeof(NODE *));
      new_data->size = new_size;
      data = new_data;
    }
    data->items[left_length] = right;
    data->length = new_length;
    RETURN_SINGLE_RESULT(create__types__list(new_length, data))
  }

$types::list/drop
  {
    CHECK_ARGUMENTS(1)
    NODE *list = ARGUMENTS(0);
    long len = list->list.length;
    if (len == 0) RUNTIME_ERROR("Attempt to drop an element from an empty list!")
    NODE *new_list = create__types__list(len-1, list->list.data);
    RETURN_SINGLE_RESULT(create__types__list(len-1, list->list.data))
  }

$types::list/pop
  {
    CHECK_ARGUMENTS(1)
    if (RESULT_COUNT != 2) RUNTIME_ERROR("Invalid number of expected results!")
    NODE *list = ARGUMENTS(0);
    long len = list->list.length;
    if (len == 0) RUNTIME_ERROR("Attempt to pop an element from an empty list!")
    NODE *new_list = create__types__list(len-1, list->list.data);
    START_ARGUMENTS(2)
    ARGUMENTS(0) = new_list;
    ARGUMENTS(1) = list->list.data->items[len-1];
    RETURN
  }

$types::list/peek
  {
    CHECK_ARGUMENTS(1)
    NODE *list = ARGUMENTS(0);
    long len = list->list.length;
    if (len == 0) RUNTIME_ERROR("Attempt to peek an element of an empty list!")
    RETURN_SINGLE_RESULT(list->list.data->items[len-1])
  }

$types::list/append
  {
    CHECK_ARGUMENTS(2)
    NODE *right = ARGUMENTS(1);
    if (TYPEOF(right) != TYPE(types::list)) INVALID_ARGUMENTS_ERROR
    NODE *left = ARGUMENTS(0);
    long left_length = left->list.length;
    if (left_length == 0) RETURN_SINGLE_RESULT(right)
    long right_length = right->list.length;
    if (right_length == 0) RETURN_SINGLE_RESULT(left)
    long new_length = left_length+right_length;
    LIST_DATA *data = left->list.data;
    if (data->size < new_length || data->length != left_length) {
      long new_size = ALLOCATION_SIZE(2*new_length);
      LIST_DATA *new_data = allocate_large(sizeof(LIST_DATA)+new_size*sizeof(NODE *));
      new_data->items = (void *)(new_data+1);
      if (data) memcpy(new_data->items, data->items, left_length*sizeof(NODE *));
      new_data->size = new_size;
      data = new_data;
    }
    memcpy(
      data->items+left_length,
      right->list.data->items,
      right_length*sizeof(NODE *));
    data->length = new_length;
    RETURN_SINGLE_RESULT(create__types__list(new_length, data))
  }

$types::list/range
  {
    CHECK_ARGUMENTS(3)
    NODE *self = ARGUMENTS(0);
    long first_idx = to_long(ARGUMENTS(1));
    long last_idx = to_long(ARGUMENTS(2));
    long len = self->list.length;
    if (first_idx < 0) first_idx = len+first_idx+1;
    if (last_idx < 0) last_idx = len+last_idx+1;
    if (first_idx < 1 || first_idx > len+1) INVALID_INDEX_ERROR
    if (last_idx < 0 || last_idx > len) INVALID_INDEX_ERROR
    if (first_idx > last_idx+1) INVALID_ARGUMENTS_ERROR
    if (first_idx == 1 && last_idx == len) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_list))
    LIST_DATA *data = self->list.data;
    LIST_DATA *new_data = allocate_large(sizeof(LIST_DATA)+new_len*sizeof(NODE *));
    new_data->items = (void *)(new_data+1);
    memcpy(new_data->items, data->items+first_idx-1, new_len*sizeof(NODE *));
    new_data->size = new_len;
    new_data->length = new_len;
    RETURN_SINGLE_RESULT(create__types__list(new_len, new_data))
  }

$types::generic_list/delete_at:
  # deletes zero or more items at the specified position (<idx>)
  (
    &self
    idx # the position where to start deleting
    count = 1 # the number of items to delete
  )
  if count != 0: !self append(range(self 1 idx-1) range(self idx+count -1))

$std::normalized_index:
  (
    self
    idx
    -> return
  )
  if
    idx >= 0:
      return idx
    :
      return length_of(self)+1+idx

$types::generic_list/is_empty: (self) -> length_of(self) == 0

$types::generic_list/for_each_from_to:
  #
    Iterates over each item in the list starting with the *first* item
    until (and including) the *last* item.

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the position no.
    of the item within the list.

    If a second statement sequence (*body2*) is supplied it is called
    between two calls to *body* (without any arguments).
  (
    self # the list to iterate over
    first # the no. of the first item
    last # the no. of the first item
    body # the statement sequence to call for each item
    body2? # a statement sequence to call between two item-calls
  )
  $$i normalized_index(self first)
  $n normalized_index(self last)
  while -> i <= n:
    if
      parameter_count_of(body) == 2:
	body i self(i)
      :
	body self(i)
    if body2.is_defined && i < n: body2
    plus &i 1

$types::generic_list/for_each_from_down_to: (self first last body body2?)
  $$i normalized_index(self first)
  $n normalized_index(self last)
  while -> i >= n:
    if
      parameter_count_of(body) == 2:
	body i self(i)
      :
	body self(i)
    if body2.is_defined && i < n: body2
    minus &i 1

$types::generic_list/for_each: (self body body2?)
  $$i 1
  $n length_of(self)
  if
    parameter_count_of(body) == 2:
      while -> i <= n:
	body i self(i)
	if body2.is_defined && i < n: body2
	plus &i 1
    :
      while -> i <= n:
	body self(i)
	if body2.is_defined && i < n: body2
	plus &i 1

$types::generic_list/update_each:
  (
    self
    body
    -> return
  )
  $$i 1
  $n length_of(self)
  $$new_list types::list
  if
    parameter_count_of(body) == 2:
      while -> i <= n:
	push &new_list body(i self(i))
	plus &i 1
    :
      while -> i <= n:
	push &new_list body(self(i))
	plus &i 1
  return new_list

$types::list/for_each_pair: (self body)
  $$i 1
  $n length_of(self)
  while -> i < n:
    body self(i) self(i+1)
    plus &i 2
  if is_odd(n): body self(i)

$types::generic_list/get: (self)
  if length_of(self) == 0: raise "Attempt to get an element from an empty list!"
  -> range(self 2 -1) self(1)

$types::list/put: (self item) -> append(list(item) self)

$types::list/merge:
  (
    $left
    $right
    func?
    -> return
  )
  $$result list()
  forever:
    if
      length_of(left) > 0:
	if
	  length_of(right) > 0:
	    if
	      ||
		func.is_undefined && left(1) <= right(1)
		func.is_defined && not(func(right(1) left(1)))
	      :
		push &result get(&left)
	      :
		push &result get(&right)
	  :
	    return append(result left)
      :
	return append(result right)

$types::list/serialize:
  (
    self
    indent = 0
    -> return
  )
  if self.is_empty: return "list()"
  $$buf "list"
  for_each self: (item)
    write_to &buf '@nl;' spaces(indent+2) serialize(item indent+2)
  -> buf

$types::list/sort:
  (
    self
    func? # default: <less>
    -> return
  )
  $n length_of(self)
  case
    n
    0, 1:
      return self
    2:
      if
	||
	  func.is_undefined && self(1) <= self(2)
	  func.is_defined && not(func(self(2) self(1)))
	:
	  return self
	:
	  return list(self(2) self(1))
    :
      $m n .div. 2
      if
	func.is_undefined:
	  return merge(sort(range(self 1 m)) sort(range(self m+1 n)))
	:
	  return
	    merge(sort(range(self 1 m) func) sort(range(self m+1 n) func) func)

{
  <kind function>

  long types::list/debug_string(NODE *node, int indent, int max_depth, char *buf) {
    if (node->list.length == 0) {
      return debug_print(indent, buf, "empty_list", node);
    } else {
      if (max_depth == 0) {
        if (node->list.length == 1) {
          return debug_print(indent, buf, "<list of 1 item>", node);
        } else {
          return debug_print(indent, buf, "<list of %ld items>", node->list.length);
        }
      } else {
        int i, n, len;
        n = debug_print_head(&indent, &buf, "list");
        const char *contents_indent = indent_to_string(indent);
        for (i = 0; i < node->list.length; ++i) {
          n += print(&buf, contents_indent);
          len = debug_string(node->list.data->items[i], indent, max_depth-1, buf);
          if (buf) buf += len;
          n += len;
        }
        return n;
      }
    }
  }
}

$types::list/new_empty_collection: (_self) -> types::list

$types::generic_list/equal:
  #
    Compares two lists item per item.

    If <right> is undefined or is not a list then <std::false> is returned.
  (
    left
    right
    -> return
  )
  unless right.is_defined && right.is_a_list: return false
  if length_of(left) != length_of(right): return false
  for_each left: (idx item) if item != right(idx): return false
  -> true

$types::generic_list/filter: (self test)
  $$new_list new_empty_collection(self)
  for_each self: (item) if test(item): push &new_list item
  -> new_list

$types::generic_list/map: (self func)
  $$new_list new_empty_collection(self)
  for_each self: (item) push &new_list func(item)
  -> new_list

$types::generic_list/dup:
  # creates a list containing <n> copies of the original list's contents
  (
    self
    n # the duplication count
  )
  case n 0 (-> empty_list) 1 (-> self):
    if n < 0: raise "Negative argument for dup!"
    $$result dup(self n .div. 2)
    append &result result
    if n.is_odd: append &result self
    -> result

$types::generic_list/interleave:
  #
    creates a list containing the elements from the source lists in interleaved
    order; the last *n* source lists (for an arbitrary value of *n*) may be
    one element shorter than the first list.
  (
    lists*
  )
  $n length_of(lists(1))
  $$result empty_list
  from_to 1 n-1: (i) for_each lists: (current_list) push &result current_list(i)
  for_each lists: (current_list)
    if length_of(current_list) >= n: push &result current_list(n)
  -> result

$types::generic_list/contains:
  (
    self
    item
    -> return
  )
  for_each self: (current_item) if current_item == item: return true
  -> false

$std::is_a_sequence ()

$types::object.is_a_sequence false

$std::sequence: (items*)
  ->
    list(items*)
      .is_a_sequence true
      /contains:
	(
	  self
	  element
	  -> return
	)
	for_each self: (item)
	  if item == element || item .contains. element: return true
	-> false

register_deserializer "list":
  (
    $text
    base_indent
    -> return
  )
  if text .has_prefix. "()": return range(text 3 -1) empty_list
  if text(1) != '@nl;':
    raise "Invalid list object encountered during deserialisation!"
  $$obj empty_list
  forever:
    if length_of(text) == 0 || text(1) != '@nl;': return text obj
    get_deserialization_indent $remaining_text $indent text
    if indent <= base_indent: return text obj
    !text remaining_text
    push &obj deserialize_item(&text indent)
