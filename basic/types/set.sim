#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

$types::generic_set types::object
  #
    the prototype object for all kinds of sets

$types::generic_set/union:
  #
    returns the union of two sets
  (
    &left # the first set
    right # the second set
  )
  for_each right: (key) !left(key) true

$types::generic_set/serialize:
  #
    converts the set to a machine-readable string
  (
    self # the set
    indent = 0 # the number of spaces to use for indenting lines
    -> return
  )
  $tag serialization_tag_of(self)
  if self.is_empty: return "@(tag)()"
  $$buf tag
  for_each self: (key)
    write_to &buf '@nl;' spaces(indent+2) serialize(key indent+2)
  -> buf

$types::generic_set/is_empty:
  #
    checks whether the set is empty or not
  (
    self
  )
  -> length_of(self) == 0

$types::generic_set/to_list:
  #
    returns a list containing all set elements
  (
    self
  )
  $$items empty_list
  for_each self: (item) push &items item
  -> items

$std::is_a_set ()
  #
    returns <true> for sets; <false> for all other objects

$types::object.is_a_set false # obvious
$types::generic_set.is_a_set true # obvious

$types::set types::unordered_set
  #
    the prototype object for all unordered sets

$types::set.serialization_tag_of "set"
  #
    the name to use for serialization

    This name should be redefined for more specialized kinds of sets.

$std::empty_set types::set
  #
    the empty set

$std::set:
  #
    constructs a set containing the specified elements
  (
    args*
  )
  $$tab types::set
  for_each args: (key) !tab(key) true
  -> tab
