#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

$delta_of ()
$additional_increment_of ()
$base_increment_of ()
$steps_of ()
$value_of ()
$error_of ()

$std::bresenham:
  #
    return an iterators

    The iterator produces *count* equally distributed values starting with the
    *first* value and ending with the *last* value.
  (
    count # the number of values to return
    first # the first value to return
    last # the last value to return
  )
  $delta abs(last-first)
  $sign sgn(last-first)
  $steps count-1
  ->
    types::iterator
      .length_of count
      .delta_of delta .mod. steps
      .base_increment_of sign*div(delta steps)
      .additional_increment_of sign
      .steps_of steps
      .value_of first
      .error_of steps >> 1
      /next: (&self)
	$$error error_of(self)
	$value value_of(self)
	$$new_value value
	minus &error delta_of(self)
	plus &new_value base_increment_of(self)
	if error < 0:
	  plus &error steps_of(self)
	  plus &new_value additional_increment_of(self)
	!self.error_of error
	!self.value_of new_value
	-> value
