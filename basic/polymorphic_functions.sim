#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

$std::plus ()
  #
    add two numbers of any kind

    The result is always stored in the simplest possible form.

    See also: std::minus, std::times, std::over, std::div, std::mod

$std::minus () #
  #
    subtract two numbers of any kind

    The result is always stored in the simplest possible form.

    See also: std::negate, std::plus, std::times, std::over, std::div, std::mod

$std::times () #
  #
    multiply two numbers of any kind

    The result is always stored in the simplest possible form.

    See also: std::over, std::div, std::mod, std::plus, std::minus

$std::over () #
  #
    divide two numbers of any kind

    The result is stored as an integer if there is no remainder.

    See also: std::div, std::mod, std::times, std::plus, std::minus

$std::div () #
  #
    divide two integer numbers

    The result is rounded towards zero.

    See also: std::times, std::over, std::mod, std::plus, std::minus

$std::mod () #
  #
    compute the remainder of two integer numbers

    The result has the same sign as the dividend

    See also: std::div,  std::times, std::over, std::plus, std::minus

$std::negate () #
  #
    negate the numeric argument

    The result is equal to

    0 - argument

    See also: std::minus

$std::equal () #
  #
    compares two objects for equality

    Two objects are equal if the equal function says so ... ^^

    Two identical objects should always be equal.

    <std::undefined> should only be equal to itself and to no other object.

    There is no separate function to test non-equality.

    *a* != *b*

    is converted by the compiler to

    <std::not>(<std::equal>(*a* *b*))

    See also: std::equal_type_and_value, std::less


$std::equal_type_and_value ()
  #
    compares two objects for equality in a stricter way

    When comparing two objects of different types this function shall always
    return <std::false>.

    If this function returns <std::true> for two objects *a* and *b* then
    this should imply that

    <std::hash>(a) == <std::hash>(b)

    This function is usually used in combination with <std::hash>. Two objects
    that are "equal" (due to <std::equal>) might return different hash values.

    See also: std::equal, std::hash

$std::less ()
  #
    compares two objects in an object specific way

    The two objects must be of a comparable type.

    This function is used to implement the following comparison operators:

    *a* < *b*

    is converted by the compiler to

    <std::less>(*a* *b*)

    *a* > *b*

    is converted by the compiler to

    <std::less>(*b* *a*)

    *a* <= *b*

    is converted by the compiler to

    <std::not>(<std::less>(*b* *a*))

    *a* >= *b*

    is converted by the compiler to

    <std::not>(<std::less>(*a* *b*))

    See also: std::numerically_less, std::equal


$std::numerically_less ()
  #
    compares two objects and treats them as numeric values

    See also: std::less

$std::not ()
  #
    negate the boolean argument

    <std::not>(<std::true>) yields <std::false)

    <std::not>(<std::false>) yields <std::true)

    See also: std::equal, std::less

$std::and ()
  #
    "short cut" and-operation

    The left argument must be <std::true> or <std::false>.

    The right argument must be a function that evaluates to
    <std::true> or <std::false>.

    *a* && *b*

    is converted by the compiler to

    <std::and>(**a** -> **b**)

    See also: std::or, std::if

$std::or ()
  #
    "short cut" or- operation;

    The left argument must be <std::true> or <std::false>.

    The right argument must be a function that evaluates to
    <std::true> or <std::false>.

    *a* || *b*

    is converted by the compiler to

    <std::or>(**a** -> **b**)

    See also: std::and, std::if

$std::if ()
  #
    classic if; can be used as a function or a procedure

    The first argument must be <std::true> or <std::false>.

    The second argument represents the "then-part" and must be a function; it
    is called, if the first argument is <std::true>.

    The third argument is optional represents the "else-part". if present it
    must be a function and is called, if the first argument is <std::false>.

    The "then-part"- and "else-part" function can return any number of results
    (including none). But both (if then "else-part" is present) should return
    the *same* number of results.

    Topics: Control Flow, Branches

    See also: std::unless, std::default_value

$std::unless ()
  #
    executes a function unless the *condition* is true

    The first argument must be <std::true> or <std::false>.

    The second argument must be a function that does not return any results.

    In the case the first argument is <std::true> nothing is done.

    In the case the first argument is <std::false> the function specified as
    the second argument is called.

    Topics: Control Flow, Branches

    See also: std::if, std::default_value

$std::shift_left ()
  #
    bitwise shift-left operation

    The first operand (must be positive integer) is shifted left by the number
    of bits specified by the second operandt, that must be a positive integer,
    too.

    There is no restriction in the size of the integer numbers!

    See also: std::shift_right, std::bit_and, std::bit_or, std::bit_xor

$std::shift_right ()
  #
    bitwise shift-right operation

    The first operand (must be positive integer) is shifted right by the number
    of bits specified by the second operandt, that must be a positive integer,
    too.

    Bits that are shifted out on the right side are "lost".

    There is no restriction in the size of the integer numbers!

    See also: std::shift_right, std::bit_and, std::bit_or, std::bit_xor

$std::bit_and ()
  #
    bitwise and operation

    The two operands (both must be positive integers of any size) are combined
    bit for bit using an and-operation.

    See also: std::bit_or, std::bit_xor, std::shift_left, std::shift_right

$std::bit_or ()
  #
    bitwise and operation

    The two operands (both must be positive integers of any size) are combined
    bit for bit using an inclusive-or-operation.

    See also: std::bit_and, std::bit_xor, std::shift_left, std::shift_right

$std::bit_xor ()
  #
    bitwise and operation

    The two operands (both must be positive integers of any size) are combined
    bit for bit using an exclusive-or-operation.

    See also: std::bit_and, std::bit_or, std::shift_left, std::shift_right

$std::parameter_count_of (!)
  #
    number of wanted arguments

    This attribute returns the number of arguments to use when calling its
    function. Functions that accept a variable number of arguments will return
    <std::undefined>.

    **Attention**: Functions accepting a variable number of arguments might have
    a minimum and/or maximum number of expected arguments. These numbers **cannot** be
    retrieved during runtime!

$std::is_defined ()
  #
    check if this object is a descendant of <types::object>

$std::is_undefined ()
  #
    check if this object is <types::undefined>

    See also: std::is_undefined

$std::default_value ()
  #
    conditional expression

    returns the first argument if it is not equal to <std::undefined>

    otherwise the second argument is returned

    See also: std::if

$std::is_valid ()
  #
    checks the state of an object

    See also: std::is_defined, std::is_undefined

$std::to_string ()
  #
    returns a human readable presentation of the object

    Returns a string representation of its single argument.

    When called on a string the string is returned unaltered.

    Topic: Strings

    See also: std::to_list, std::to_number, std::to_integer, std::to_real

$std::to_list ()
  #
    converts the object into a list

    Returns the contents of its single argument within a list.

    When called on a list the list is returned unaltered.

    See also: std::to_string, std::to_number, std::to_integer, std::to_real

$std::serialize ()
  #
    converts to a machine readable string

    If possible the object ist transformed into its source code form.

    Topic: Strings

    See also: std::deserialize, std::serialization_tag_of, std::to_string

$std::serialization_tag_of (!)
  #
    returns a tag denoting the type of an object

    This attribute allows inheriting the serialization method and just changing
    its type.

    See also: std::serialize, register_deserializer

$std::to_number ()
  #
    converts its argument into a number

    See also: std::parse_number, std::to_integer, std::to_real, std::to_string

$std::parse_number ()
  #
    parses a number at the front of a string

    Returns the number of the front of a string as its first and the rest of
    the parsed string as its second result.

    Topic: Strings

    See also: std::to_number, std::parse_integer, std::parse_real

$std::to_integer ()
  #
    converts its argument into an integer number

    See also: std::parse_integer, std::to_number, std::to_real, std::to_string

$std::parse_integer ()
  #
    parses an integer number at the front of a string

    Returns the integer number of the front of a string as its first and the
    rest of the parsed string as its second result.

    Topic: Strings

    See also: std::to_integer, std::parse_number, std::parse_real

$std::to_real ()
  #
    converts its argument into a real (floating point) number

    See also: std::parse_real, std::to_number, std::to_integer, std::to_string

$std::parse_real ()
  #
    parses a real (floating point) number at the front of a string

    Returns the real number of the front of a string as its first and the
    rest of the parsed string as its second result.

    Topic: Strings

    See also: std::to_real, std::parse_number, std::parse_integer

$std::to_lower_case ()
  #
    converts all upper case characters to lower case

    Topic: Strings

    See also: std::to_upper_case, std::to_title_case

$std::to_upper_case ()
  #
    converts all lower case characters to upper case

    Topic: Strings

    See also: std::to_lower_case, std::to_title_case

$std::to_title_case ()
  #
    converts the case of characters

    All characters but the first character of each word are converted to lower
    case. The first characters of all words are converted to upper case.

    Topic: Strings

    See also: std::to_lower_case, std::to_upper_case

$std::is_empty ()
  #
    checks whether a collection contains any items

    The following invariant should always hold:

    <std::is_empty>(*collection*) == (<std::length_of>(*collection*) == 0)

    Topic: Strings

    See also: std::length_of

$std::length_of (!)
  #
    returns the number of items within a collection

    Many collections just store this value explicitely, making this a very cheap
    operation.

    But there are collections which must traverse all its contents to compute
    the total number of stored items, making this a very expensive operation!

    Topic: Strings

    See also: std::is_empty

$std::type_of (!)
  #
    the type of an object

    This attribute is used to store some kind of type information, e.g. the
    type of an event.

$std::hash ()
  #
    returns a hash value

    The returned integer number will always be the same for an object. The
    returned number might not depend on the platform the program is running!

    It must be computed from the object's contents solely!

    Topic: Strings

    See also: std::equal_type_and_value

$std::push ()
  #
    add a single item at the end of a collection

    Topic: Strings

    See also: std::pop, std::peek, std::drop, std::put, std::append

$std::pop ()
  #
    remove and return the last item of a collection

    Topic: Strings

    See also: std::peek, std::drop, std::push, std::put

$std::peek ()
  #
    returns the last item of a collection without removing it

    Topic: Strings

    See also: std::pop, std::drop, std::push, std::put

$std::drop ()
  #
    removes the last item of a collection without returning it

    Topic: Strings

    See also: std::pop, std::peek, std::push, std::put

$std::put ()
  #
    add a single item at the front of a collection

    Topic: Strings

    See also: std::get, std::push, std::pop

$std::get ()
  #
    remove and return the first item of a collection

    Topic: Strings

    See also: std::put, std::pop, std::push

$std::next ()
  #
    return the next item

    This function is used for generators (e.g. random number generators)

$std::append ()
  #
    append two collections to form a single collection

    Topic: Strings

    See also: std::push, std::dup

$std::insert_before ()
  #
    insert an item into a collection

    The first argument is the collection.

    The second argument describes the position (e.g. a numerical index).

    The third argument is the item to be inserted.

    See also: std::insert_behind, std::delete_at, std::push, std::put,
              std::first_index_of, std::last_index_of

$std::insert_behind ()
  #
    insert an item into a collection

    The first argument is the collection.

    The second argument describes the position (e.g. a numerical index).

    The third argument is the item to be inserted.

    See also: std::insert_before, std::delete_at, std::push, std::put,
              std::first_index_of, std::last_index_of

$std::first_index_of (!)
  #
    returns the first valid index of a collection

    See also: std::last_index_of, std::for_each_from_to,
	      std::for_each_from_down_to

$std::last_index_of (!)
  #
    returns the last valid index of a collection

    See also: std::first_index_of, std::for_each_from_to,
	      std::for_each_from_down_to

$std::delete_at ()
  #
    removes an item at the specified position from a collection

    **Attention**: The removed item is **not** returned!

    See also: std::insert_before, std::insert_behind, std::get, std::pop,
	      std::first_index_of, std::last_index_of

$std::union ()
  #
    returns the union of two collections

    See also: std::intersection

$std::intersection ()
  #
    returns the intersection of two collections

    See also: std::union

$std::match_character ()
  #
    try to match the start of a stream with a character

    Topic: Strings

    See also: std::match_string, std::search_character, std::search_string

$std::match_string ()
  #
    try to match the start of a stream with a string

    Topic: Strings

    See also: std::match_character, std::search_character, std::search_string

$std::search_character ()
  #
    search for a specific character within a stream

    Topic: Strings

    See also: std::search_string, std::match_character, std::match_string

$std::search_string ()
  #
    search for a specific string within a stream

    Topic: Strings

    See also: std::search_character, std::match_string, std::match_character

$std::match ()
  #
    try to match the start of a stream with a specific expression

    Topic: Strings

    See also: std::matches, std::contains, std::has_prefix, std::has_suffix,
	      std::match_string, std::match_character, std::search

$std::search ()
  #
    search for a specific expression within a stream

    Topic: Strings

    See also: std::match, std::search_string, std::search_character

$std::matches ()
  #
    checks whether a whole string matches a specific expression

    Topic: Strings

    See also: std::match, std::contains, std::has_prefix, std::has_suffix

$std::contains ()
  #
    checks whether a string contains a specific expression

    Topic: Strings

    See also: std::matches, std::has_prefix, std::has_suffix

$std::has_prefix ()
  #
    checks whether a string starts with a specific expression

    See also: std::has_suffix, std::contains, std::matches, std::without_prefix

$std::has_suffix ()
  #
    checks whether a string ends with a specific expression

    Topic: Strings

    See also: std::has_prefix, std::contains, std::matches, std::without_suffix

$std::without_prefix ()
  #
    removes a specific expression at the start of a string

    If the string specified as the first argument starts with the expression
    specified as the second argument, the matching prefix of the string is
    removed and the resulting string is returned.

    Otherwise the string is returned without alteration.

    Topic: Strings

    See also: std::without_suffix, std::has_prefix, std::has_suffix,
	      std::behind, std::truncate_from

$std::without_suffix ()
  #
    removes a specific expression at the end of a string

    If the string specified as the first argument ends with the expression
    specified as the second argument, the matching suffix of the string is
    removed and the resulting string is returned.

    Otherwise the string is returned without alteration.

    Topic: Strings

    See also: std::without_prefix, std::has_suffix, std::has_prefix,
	      std::before, std::truncate_until

$std::before ()
  #
    returns the substring before the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring before the first match of
    the expression is returned.

    **If the string does not contain the expression then the empty string is
    returned.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::truncate_from, std::between, std::behind, std::from, std::until

$std::truncate_from ()
  #
    returns the substring before the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring before the first match of
    the expression is returned.

    **If the string does not contain the expression then the string is
    returned without alteration.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::before, std::truncate_until,
	      std::truncate_before, std::truncate_behind

$std::behind ()
  #
    returns the substring behind the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring behind the first match of
    the expression is returned.

    **If the string does not contain the expression then the empty string is
    returned.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::truncate_until, std::between, std::before, std::from, std::until

$std::truncate_until ()
  #
    returns the substring behind the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring behind the first match of
    the expression is returned.

    **If the string does not contain the expression then the string is
    returned without alteration.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::behind, std::truncate_from,
	      std::truncate_before, std::truncate_behind

$std::from ()
  #
    returns the substring starting with the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring starting with the first
    match of the expression is returned.

    **If the string does not contain the expression then the empty string is
    returned.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::truncate_before, std::until, std::before, std::behind

$std::truncate_before ()
  #
    returns the substring starting with the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring starting with the first
    match of the expression is returned.

    **If the string does not contain the expression then the string is
    returned without alteration.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::from, std::truncate_behind,
	      std::truncate_from, std::truncate_until

$std::until ()
  #
    returns the substring ending with the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring ending with the first
    match of the expression is returned.

    **If the string does not contain the expression then the empty string is
    returned.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::truncate_behind, std::from, std::before, std::behind

$std::truncate_behind ()
  #
    returns the substring ending with the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring ending with the first
    match of the expression is returned.

    **If the string does not contain the expression then the string is
    returned without alteration.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::until, std::truncate_before,
	      std::truncate_from, std::truncate_until

$std::between ()
  #
    returns the substring between the two specified expressions

    If the string specified as the first argument contains the expression
    specified as the second and third argument in the correct order, the
    substring starting between the two matching expressions is returned.

    **If the string does not contain the expressions (or in the wrong order)
    then the empty string is returned.**

    An optional fourth argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    The end-expression is **always** the next match after the start-expression.

    Topic: Strings

    See also: std::behind, std::before

$std::range ()
  #
    returns a subrange of a collection

    The first argument specifies the collection.

    The second argument specifies the first index of the first item to include
    in the subrange.

    The third argument specifies the last index of the first item to include in
    the subrange.

    It is okay if the subrange is empty:

    *first_index* == *last_index* + 1

    It is an error if the size of the subrange would be negative:

    *first_index* > *last_index* + 1

    If an index is negativ it is counted from the end of the collection.

    So -1 denotes the last item of the collection, -2 denotes the next-to-last
    item and so on.

    Topic: Strings

$std::merge ()
  #
    merge two sorted collections

    See also: std::sort, std::append

$std::sort ()
  #
    sort a collection

    See also: std::merge

$std::close ()
  #
    close a resource

    See also: std::open_file_for_reading, std::open_file_for_writing,
              std::open_file_for_reading_and_writing

$std::write_some_bytes_to ()
  #
    try to write the specified number of bytes

    This is a low-level function!

    See also: std::write_to, std::read_some_bytes_from

$std::write_to ()
  #
    write the specified number of bytes

    See also: std::read_from, std::write_some_bytes_to

$std::flush ()
  #
    flushes all buffers associated with the resource

$std::read_some_bytes_from ()
  #
    try to read the specified number of bytes

    This is a low-level function!

    See also: std::read_from, std::write_some_bytes_to

$std::read_from ()
  #
    read the specified number of bytes

    See also: std::write_to, std::read_some_bytes_from

$std::key_of (!)
  #
    the key of a key-value-pair

    See also: std::value_of

$std::value_of (!)
  #
    the value of a key-value-pair

    See also: std::key_of

$std::keys_of (!)
  #
    extracts all keys of a collection into a list

    See also: std::values_of

$std::values_of (!)
  #
    extracts all values of a collection into a list

    See also: std::keys_of

$std::lower_bound_of (!)
  #
    the lower bound of a range

    See also: std::upper_bound_of

$std::upper_bound_of (!)
  #
    the upper bound of a range

    See also: std::lower_bound_of

$std::for_each_from_to ()
  #
    iterates over a subrange of the items of a collection

    See also: std::for_each, std::for_each_from_down_to,
	      std::update_each_from_to

$std::for_each_from_down_to ()
  #
    iterates over a subrange of the items of a collection in reverse order

    See also: std::for_each_downwards, std::for_each_from_to,
	      std::update_each_from_down_to

$std::for_each ()
  #
    iterates over all items of a collection

    See also: std::for_each_downwards, std::for_each_from_to,
	      std::update_each

$std::for_each_downwards ()
  #
    iterates over all items of a collection in reverse order

    See also: std::for_each, std::for_each_from_down_to,
	      std::update_each_downwards

$std::update_each_from_to ()
  #
    updates a subrange of the items of a collection

    See also: std::update_each, std::update_each_from_down_to,
	      std::for_each_from_to

$std::update_each_from_down_to ()
  #
    updates a subrange of the items of a collection in reverse order

    See also: std::update_each_downwards, std::update_each_from_to,
	      std::for_each_from_down_to

$std::update_each ()
  #
    updates all items of a collection

    See also: std::update_each_downwards, std::update_each_from_to,
	      std::for_each

$std::update_each_downwards ()
  #
    updates all items of a collection in reverse order

    See also: std::update_each, std::update_each_from_down_to,
	      std::for_each_downwards

$std::for_each_pair ()
  #
    iterates over pairs of items of a collection

    **Attention**: This function is **deprecated**!

    See also: std::for_each

$std::new_empty_collection ()
  #
    creates an empty collection

    The created collection has the same type as the first argument.

$std::filter ()
  #
    returns a collection containing all the items that fullfill the filter-condition

    See also: std::apply, std::map

$std::apply ()
  #
    applies a pure function to all items of a collection

    The function applications might be executed in parallel!

    See also: std::map, std::filter

$std::map ()
  #
    applies a function to all items of a collection

    The function applications are executed in strict sequential order.

    See also: std::apply, std::filter

$std::dup ()
  #
    appends a collection to itself

    See also: std::append

$std::interleave ()
  #
    returns a collection with interleaved items of the specified collections

$std::stop ()
  #
    stop a service or something similar

$std::get_file_descriptors ()
  #
    retrieve a set of file descriptors

    **Attention**: This function is **deprecated** as a general purpose
    polymorphic function.

$std::handle_requests ()
  #
    handle some client requests

    **Attention**: This function is **deprecated** as a general purpose
    polymorphic function.

$std::select ()
  #
    select items from a collection

    See also: std::delete, std::update

$std::delete ()
  #
    delete items from a collection

    See also: std::select, std::update

$std::update ()
  #
    update items in a collection

    See also: std::select, std::delete

$std::call_command ()
  #
    call a (possibly remote) command

    **Attention**: This function is **deprecated** as a general purpose
    polymorphic function.
