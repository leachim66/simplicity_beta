#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  extracts documentation (as HTML-text) from remarks

<using std>
<using sim2c>
<using node>
<using html>

$filename_of (!)
$used_namespaces_of (!)
$derived_types_of (!)
$methods_of (!)
$types_of (!)

$$polymorphic_functions
  multi_dimensional_set(types::key_order_table types::key_order_set)

$$definitions empty_key_order_table

$$short_descriptions empty_table
  # is also used to check whether a symbol is defined or not

$$topics empty_key_order_table

$BORING . # ^^
$FUNCTION .
$POLYMORPHIC_FUNCTION .
$POLYMORPHIC_ATTRIBUTE .
$INLINE_C_TYPE .
$INLINE_C_OBJECT .
$INLINE_C_FUNCTION .
$UNIQUE_ITEM .
$CONSTANT .
$VARIABLE .

$PARAMETER_COUNT_OR_MYSELF
  alt
    '*'
    '?'
    sequence
      alt('=' sim2c::WHITESPACE, '=', sim2c::WHITESPACE)
      many(not_followed_by(':'), ANY_CHARACTER)

$$path_prefix undefined

$create_page: (filename body)
  # create an HTML-page with a standardized design

  collect_output $page:
    HTML:
      HEAD:
	STYLE "
	  body {
	    background-color: white;
	    font-family: Times New Roman, Times;
	    font-size: 12pt;
	    color: #222;
	  }
	  h1 {
	    font-family: Arial, Helvetica;
	    font-size: 20pt;
	    color: #333;
	    margin-top: 0pt;
	    margin-bottom: 8pt;
	  }
	  h2 {
	    font-family: Arial, Helvetica;
	    font-size: 16pt;
	    color: #222;
	    margin-top: 5pt;
	    margin-bottom: 5pt;
	  }
	  h3 {
	    font-family: Arial, Helvetica;
	    font-size: 14pt;
	    color: #222;
	    margin-top: 3pt;
	    margin-bottom: 3pt;
	  }
	  h4 {
	    font-family: Arial, Helvetica;
	    font-size: 13pt;
	    color: #222;
	    margin-top: 2pt;
	    margin-bottom: 2pt;
	  }
	  dt {
	    font-style: italic;
	    margin-bottom: 4pt;
	  }
	  dd {
	    padding-left: 0pt;
	    margin-left: 16pt;
	    margin-top: 0pt;
	    margin-bottom: 0pt;
	  }
	  p {
	    margin-top: 0pt;
	    margin-bottom: 8pt;
	  }
	  a {
	    text-decoration: none;
	  }
	  div.Example {
	    background-color: #ffc;
	    border: solid 1pt;
	    margin-top: 6pt;
	    margin-bottom: 8pt;
	  }
	  div.Output {
	    background-color: #cff;
	    border: solid 1pt;
	    margin-top: 6pt;
	    margin-bottom: 8pt;
	  }
	  div.footer {
	    padding-top: 10pt;
	    font-size: 10pt;
	  }
	  pre {
	    font-family: Courier New, Courier;
	    font-size: 12pt;
	    padding-top: 0pt;
	    padding-bottom: 0pt;
	    margin-top: 2pt;
	    margin-bottom: 2pt;
	  }
	  td.remark {
	    padding-left: 10pt;
	  }
      BODY body
  save filename page

types::object $symbol_info
  .kind_of BORING
  .name_of undefined
  .base_of undefined
  .parameters_of undefined
  .remark_lines_of undefined
  .derived_types_of empty_key_order_set
  .methods_of empty_key_order_table
  .types_of empty_key_order_set

$extract_documentation_from_file: (filename)
  ewrite "extracting documentation from @(filename)@nl;"
  $buf load(filename).from_utf8
  if length_of(buf) == 0: Error "Empty source text!"
  if buf(1) <= ' ': Error "Whitespace at start of source text!"
  if buf(-1) != newline: Error "Missing newline at end of source text!"

  %sim2c::module_name
    replace_all(filename .without_suffix. ".sim" '/' = "__")
      #filename .without_prefix. main_prefix .without_suffix. ".sim"

  %%sim2c::required_modules empty_insert_order_table
  %%sim2c::used_namespaces empty_insert_order_set
  %%sim2c::defined_namespaces empty_insert_order_set
  %%sim2c::namespace_mappings empty_insert_order_table
  %%sim2c::included_files empty_insert_order_set
  %%sim2c::linked_libraries empty_insert_order_set
  %%sim2c::enumeration_count 0
  $$fragments cut_into_fragments(buf)
  update_each &fragments: (&fragment) tokenize &fragment
  $$trees empty_list
  $$first_idx 1
  do: (-> done)
    for_each fragments: (idx fragment)
      case
	source_of(fragment)(1)
	'#':
	  !first_idx idx+1 # ignore remark
	'<':
	  !first_idx idx+1
	  parse_meta_instruction $_tree fragment
	:
	  done
  range &fragments first_idx -1
  for_each fragments: (fragment) push &trees parse_statement(fragment)
  if used_namespaces.is_empty: !used_namespaces("std") true
  $$local_method_names empty_set
  for_each trees: (statement)
    cond (-> statement.is_a_remark: pass) (-> statement.is_c_code: pass) -> statement.is_an_assignment:
      $destination output_arguments_of(statement)(1)
      if destination.is_a_definition:
	$identifier identifier_of(destination)
	unless namespace_of(identifier).is_defined:
	  $source arguments_of(statement)(1)
	  if source.is_a_polymorphic_function_constant:
	    !local_method_names(name_of(identifier_of(destination))) true
  for_each trees:
    (
      statement
      -> break
    )
    cond
      -> statement.is_a_remark: pass
      -> statement.is_c_code:
	$identifier identifier_of(statement)
	if identifier.is_defined:
	  $namespace namespace_of(identifier)
	  if namespace.is_defined:
	    $name name_of(identifier)
	    case kind_of(statement)
	      "type":
		if namespace.is_defined:
		  $base base_of(statement)
		  !definitions(ordered_name(namespace name))
		    symbol_info
		      .kind_of INLINE_C_TYPE
		      .name_of identifier.to_string
		      .base_of if(base.is_defined (-> base.to_string) -> undefined)
		      .remark_lines_of remark_lines_of(statement)
		      .filename_of filename
	      "object":
		!definitions(ordered_name(namespace name))
		  symbol_info
		    .kind_of INLINE_C_OBJECT
		    .name_of identifier.to_string
		    .remark_lines_of remark_lines_of(statement)
		    .filename_of filename
      -> statement.is_an_assignment:
	$destination output_arguments_of(statement)(1)(.base_of undefined)
	$$info symbol_info(.filename_of filename)
	if destination.is_a_definition:
	  $identifier identifier_of(destination)
	  $namespace namespace_of(identifier)
	  if namespace.is_defined:
	    $name name_of(identifier)
	    $iname ordered_name(namespace name)
	    !info.name_of identifier.to_string
	    $source arguments_of(statement)(1)
	    cond
	      -> source.is_a_polymorphic_function_constant:
		!polymorphic_functions(name namespace) true
		!definitions(iname)
		  info
		    .kind_of
		      if
			source.is_a_setter
			-> POLYMORPHIC_ATTRIBUTE
			-> POLYMORPHIC_FUNCTION
		    .remark_lines_of remark_lines_of(statement)
		break
	      -> source.is_a_body:
		!info.base_of "types::function"
		!info.kind_of FUNCTION
		!info.parameters_of parameters_of(source)
		!info.remark_lines_of remark_lines_of(source)
	      -> source.is_a_c_body:
		!info.kind_of INLINE_C_FUNCTION
		!info.remark_lines_of remark_lines_of(statement)
	      -> source.is_an_identifier:
		if namespace_of(source).is_defined:
		  !info
		    .base_of source.to_string
		    .remark_lines_of remark_lines_of(statement)
	      -> source.is_a_constant:
		!definitions(iname)
		  info
		    .kind_of
		      if
			source.is_a_unique_item_constant
			-> UNIQUE_ITEM
			-> CONSTANT
		    .remark_lines_of remark_lines_of(statement)
		break
	    case
	      attribute_kind_of(destination)
	      NONE:
		$previous_definition definitions(iname)
		if previous_definition.is_defined:
		  if kind_of(previous_definition) == INLINE_C_TYPE:
		    !info.types_of types_of(previous_definition)
		    !info.derived_types_of derived_types_of(previous_definition)
		    !info.methods_of methods_of(previous_definition)
		!definitions(iname) info
	      ATTRIBUTE_KIND, METHOD_KIND:
		$$attr attribute_of(destination)

		$type
		  default_value(definitions(iname) symbol_info)(.kind_of INLINE_C_TYPE)

		!definitions(iname) type
		if attr.is_defined:
		  $attr_name attr.to_string
		  unless local_method_names(attr_name):
		    unless namespace_of(attr).is_defined:
		      !attr.used_namespaces_of used_namespaces
		    $$definition default_value(definitions(iname) symbol_info)
		    !definition.kind_of INLINE_C_TYPE
		    !definition.methods_of(attr_name) info(.attribute_of attr)
		    !definitions(iname) definition

$extract_documentation_from_directory: (path)
  for_each directory(--SORT path): (entry)
    $name fullname_of(entry)
    cond
      -> entry.is_a_directory: extract_documentation_from_directory name
      -> name .has_suffix. ".sim": extract_documentation_from_file name

$resolved_name: (attr)
  $name name_of(attr)
  if namespace_of(attr).is_defined (-> attr.to_string):
    $$resolved_namespace undefined
    for_each used_namespaces_of(attr): (namespace)
      if polymorphic_functions(name namespace):
	if resolved_namespace.is_defined:
	  Error "
	    The attribute "@(name)" cannot be uniquely resolved!
	!resolved_namespace namespace
    unless resolved_namespace.is_defined:
      Error "
	The attribute "@(name)" cannot be resolved!
    -> string(resolved_namespace "::" name)

$add_derived_type: (base name)
  $ibase ordered_name(base .before. "::" base .behind. "::")
  $$definition definitions(ibase)
  if definition.is_defined:
    !definition.derived_types_of(name) true
    unless kind_of(definition) == INLINE_C_TYPE:
      !definition.kind_of INLINE_C_TYPE
      $base_of_base base_of(definition)
      if base_of_base.is_defined: add_derived_type base_of_base ibase
    !definitions(ibase) definition

$mangled: (name) -> replace_all(name "::" = "__" '/' = "___")

$ordered_name: (namespace name)
  ->
    string
      name.to_lower_case
      '/'
      namespace.to_lower_case
      '/'
      name
      '/'
      namespace

$link_bar:
  P:
    A "href" = "index.html" "Home"
    TEXT "&nbsp;&nbsp;&nbsp;"
    A "href" = "manual.html" "Manual"
    TEXT "&nbsp;&nbsp;&nbsp;"
    A "href" = "type_index.html" "Type Index"
    TEXT "&nbsp;&nbsp;&nbsp;"
    A "href" = "symbol_index.html" "Symbol Index"
    TEXT "&nbsp;&nbsp;&nbsp;"
    A "href" = "topic_index.html" "Topic Index"

$TOPIC alt("Topics" "Topic"), ':'
$EXAMPLE alt("Example" "Output"), some(not_followed_by(':'), ANY_CHARACTER), ':'

$to_paragraphs: (lines)
  $$paragraphs empty_list
  $$text ""
  $$pre_mode false
  for_each lines: (line)
    if
      pre_mode:
	if
	  line .has_prefix. EXAMPLE:
	    trim &text
	    push &paragraphs text
	    !text line
	  :
	    writeln_to &text line
      :
	if
	  line == "":
	    if text != "":
	      push &paragraphs text
	      !text ""
	  :
	    if
	      text == "":
		if line .has_prefix. EXAMPLE: !pre_mode true
	      :
		push &text ' '
	    append &text line.trim
  if text != "": push &paragraphs text
  -> paragraphs

$create_info_page: (function_name info)
  $resolve_reference: (&reference)
    if
      reference .contains. '/':
	$$type_name reference .before. '/'
	$$method_name reference .behind. '/'
	unless type_name .contains. "::": append "types::" &type_name
	unless method_name .contains. "::": append "std::" &method_name
	!reference string(type_name '/' method_name)
      :
	unless reference .contains. "::": append "std::" &reference

    if short_descriptions(reference).is_undefined:
      Error "
	The documentation for "@(function_name)"
	(defined in "@(filename_of(info))")
	references the undefined symbol "@(reference)"!

  if function_name.is_defined:
    create_page "html/@(function_name.mangled).html":
      link_bar
      if
	function_name .contains. '/':
	  $type function_name .before. '/'
	  $method function_name .behind. '/'
	  H1
	    string
	      '['
	      type
	      "]("
	      type.mangled
	      ".html)/["
	      method
	      "]("
	      method.mangled
	      ".html)"
	:
	  H1 function_name
      $$short_description undefined
      $$parameters empty_list
      $$return_values empty_list
      $$descriptions empty_list
      $$technical_details undefined
      $$references empty_list
      $$topic_list empty_list
      $$examples empty_list
      $remark_lines remark_lines_of(info)
      if
	&&
	  do_print_missing
	  remark_lines.is_undefined || remark_lines.is_empty
	:
	  ewrite "
	    Missing documentation for @(function_name) @
	    (defined in "@(filename_of(info))")!
      if remark_lines.is_defined:
	$paragraphs remark_lines.to_paragraphs
	for_each paragraphs: ($paragraph)
	  cond
	    ->
	      has_prefix
		paragraph
		sequence
		  "Parameter"
		  sim2c::WHITESPACE
		  NAME
		  optional(PARAMETER_COUNT_OR_MYSELF)
		  ':'
	      :
		$$parameter between(paragraph sim2c::WHITESPACE ':')
		cond
		  -> parameter .has_suffix. '?':
		    !parameter string(range(parameter 1 -2) " (optional)")
		  -> parameter .has_suffix. '*':
		    !parameter
		      string(range(parameter 1 -2) " (zero or more arguments)")
		  -> parameter .contains. '=':
		    !parameter
		      string
			(parameter .before. '=').trim
			" (optional; default value: "
			(parameter .behind. '=').trim
			")"
		$description (paragraph .behind. ':').trim
		push &parameters parameter = description
	    ->
	      has_prefix
		paragraph
		sequence
		  "Returns"
		  sim2c::WHITESPACE
		  NAME
		  optional(PARAMETER_COUNT_OR_MYSELF)
		  ':'
	      :
		$$return_value between(paragraph sim2c::WHITESPACE ':')
		cond
		  -> return_value .has_suffix. '?':
		    !return_value string(range(return_value 1 -2) " (optional)")
		  -> return_value .has_suffix. '*':
		    !return_value
		      string
			range(return_value 1 -2)
			" (zero or more arguments)"
		$description (paragraph .behind. ':').trim
		push &return_values return_value = description
	    -> paragraph .has_prefix. "See also:":
	      for_each split(paragraph .behind. ':' ','): (reference)
		push &references reference.trim
	    -> paragraph .has_prefix. TOPIC:
	      for_each split(paragraph .behind. ':' ','): ($topic)
		trim &topic
		push &topic_list topic

		$$topic_contents
		  default_value(topics(topic) empty_key_order_set)

		!topic_contents(function_name) true
		!topics(topic) topic_contents
	    -> paragraph .has_prefix. EXAMPLE:
	      $title (paragraph .before. ':').trim
	      $text (paragraph .behind. ':').trim
	      push &examples title = text
	    -> paragraph .has_prefix. "Technical Details:":
	      $detail (paragraph .behind. ':').trim
	      if
		detail == "":
		  !technical_details empty_list
		:
		  !technical_details list(detail)
	    :
	      replace_all
		&paragraph
		=
		  '<', NAME, optional('/', NAME), '>'
		  : ($reference)
		    range &reference 2 -2
		    resolve_reference &reference
		    -> "[@(reference)](@(reference.mangled).html)"
	      if
		short_description.is_defined:
		  if
		    technical_details.is_defined:
		      push &technical_details paragraph
		    :
		      push &descriptions paragraph
		:
		  !short_description paragraph
      if kind_of(info) == FUNCTION:
	for_each parameters_of(info): (parameter)
	  case
	    parameter_kind_of(parameter)
	    MYSELF_PARAMETER, CONTINUATION_PARAMETER:
	      pass
	    :
	      $$name name_of(identifier_of(parameter)) .without_prefix. '$'
	      cond
		-> parameter.is_an_optional_item:
		  if
		    default_value_of(parameter).is_defined:
		      write_to
			&name
			" (optional; default value: "
			default_value_of(parameter).to_string
			")"
		    :
		      append &name " (optional)"
		-> parameter.is_an_expanded_item:
		  append &name " (zero or more arguments)"

	      $description
		if
		  not(remark_lines_of(parameter).is_empty)
		  -> remark_lines_of(parameter).to_paragraphs(1)
		  -> ""

	      push &parameters name = description
      if short_description.is_defined: P short_description
      unless parameters.is_empty:
	H2 "Parameters"
	DL:
	  for_each parameters: (parameter)
	    DT key_of(parameter)
	    DD: P std::value_of(parameter)
      unless return_values.is_empty:
	H2 "Returns"
	DL:
	  for_each return_values: (return_value)
	    DT key_of(return_value)
	    DD: P std::value_of(return_value)
      unless descriptions.is_empty:
	H2 "Description"
	for_each descriptions: (description) P description
      if technical_details.is_defined:
	H2 "Technical Details"
	for_each technical_details: (detail) P detail
      unless references.is_empty:
	H2 "See also"
	TABLE:
	  for_each references: ($reference)
	    resolve_reference &reference
	    TR:
	      TD: A "href" = "@(reference.mangled).html" reference
	      TD "&nbsp;"
	      TD short_descriptions(reference)
      unless types_of(info).is_empty:
	H2 "Implemented by"
	TABLE:
	  for_each types_of(info): (name)
	    $method string(name '/' function_name)
	    TR:
	      TD: A "href" = "@(name.mangled).html" name
	      TD "&nbsp;as&nbsp;"
	      TD: A "href" = "@(method.mangled).html" method
      if kind_of(info) == INLINE_C_TYPE:
	H2 "Supported Polymorphic Functions"
	TABLE:
	  for_each methods_of(info): (method_name _method_info)
	    TR:
	      TD: A "href" = "@(method_name.mangled).html" method_name
	      TD "&nbsp;"
	      TD:
		A
		  =
		    "href"
		    "@(function_name.mangled)___@(method_name.mangled).html"
		  function_name
		  '/'
		  method_name

      $function_basename
	function_name .truncate_until. '/' .truncate_until. "::"

      unless topic_list.is_empty:
	H2 "Topics"
	TABLE:
	  for_each topic_list: (topic)
	    $filename string(replace_all(topic.to_lower_case ' ' = "_") ".html")
	    TR: TD: A "href" = filename topic

      for_each examples: (example)
	$title key_of(example)
	$text std::value_of(example)
	H2 title
	DIV "class" = title .truncate_from. alt(' ' ':'):
	  PRE
	    replace_all
	      text
	      =
		sequence
		  '@quot;'
		  many(not_followed_by('@quot;'), ANY_CHARACTER)
		  '@quot;'
		: (string_literal)
		  -> string_literal
	      function_basename = string("**" function_basename "**")
      DIV
	"class" = "footer"
	"(defined in @(filename_of(info) .without_prefix. path_prefix))@nl;"

$get_short_description: (name info)
  $remark_lines remark_lines_of(info)
  $$short_description ""
  if remark_lines.is_defined && not(remark_lines.is_empty):
    do: (-> break) for_each remark_lines: (line)
      if line == "" && short_description != "" break
      append &short_description line.trim
    if do_print_warnings && length_of(short_description) > 80:
      ewrite "

	The short description for "@(name)"
	(defined in "@(filename_of(info))")
	is quite long:
	@(short_description)
  -> short_description


$sim2c::extract_documentation: (path)
  #%html::encode: ($text tag _arg_str)
    if tag == "p":
      replace_all
	&text
	=
	  "&lt;", NAME, "::", NAME, '>'
	  : (capture)
	    $reference resolve_reference(range(capture 5 -2) "<unknown>")
	    -> "
	      <a href="@(reference.mangled).html">@(reference)</a>@
    emit text

  !path_prefix truncate_behind(path '/' -1)
  extract_documentation_from_directory path

  for_each definitions: (iname info)
    $name name_of(info)
    !short_descriptions(name) get_short_description(name info)

    if kind_of(info) == INLINE_C_TYPE:
      $base base_of(info)
      if base.is_defined: add_derived_type base iname
      $$methods empty_key_order_table
      for_each methods_of(info): ($method_name method_info)
	unless method_name .contains. "::":
	  !method_name attribute_of(method_info).resolved_name
	$sd_name string(name "/" method_name)
	!short_descriptions(sd_name) get_short_description(sd_name method_info)
	$oname
	  ordered_name(method_name .before. "::" method_name .behind. "::")
	!definitions(oname).types_of(name) true
	!methods(method_name) method_info
      !definitions(iname).methods_of methods

  create_page "html/type_index.html":
    $print_type_info:
      (
	info
	indent = 0
      )
      TR:
	$qname name_of(info)
	$remark_lines remark_lines_of(info)
	if qname.is_defined:
	  TD:
	    TEXT "&nbsp;&nbsp;&nbsp;" .dup. indent
	    A "href" = "@(qname.mangled).html" qname
	if remark_lines.is_defined && not(remark_lines.is_empty):
	  TD remark_lines.to_paragraphs(1)
	for_each derived_types_of(info): (name)
	  print_type_info definitions(name) indent+1

    link_bar
    H1 "Type Index"
    TABLE:
      for_each definitions: (_base info)
	if kind_of(info) == INLINE_C_TYPE && base_of(info).is_undefined:
	  print_type_info info

  create_page "html/symbol_index.html":
    link_bar
    H1 "id" = "index" "Symbol Index"
    from_to
      'a'
      'z': (letter)
	A "href" = "#@(letter)" letter.to_upper_case
      :
	TEXT " "
    BR
    TABLE:
      $$letter undefined
      for_each definitions: (iname info)
	if iname(1) != letter:
	  !letter iname(1)
	  TR:
	    TD "colspan" = 3:
	      H2 "id" = letter:
		TEXT letter.to_upper_case
		A "href" = "#index" "&nbsp;&#x2302;" # home symbol
	$$remark undefined
	$name name_of(info)
	$remark_lines remark_lines_of(info)
	if remark_lines.is_defined && not(remark_lines.is_empty):
	  !remark remark_lines.to_paragraphs(1)

	$kind_info
	  case
	    kind_of(info)
	    FUNCTION
	    -> "function"
	    INLINE_C_FUNCTION
	    -> "inline-C function"
	    POLYMORPHIC
	    -> "polymorphic function"
	    UNIQUE_ITEM
	    -> "unique item"
	    CONSTANT
	    -> "constant"
	    INLINE_C_TYPE
	    -> "inine-C type"
	    INLINE_C_OBJECT
	    -> "inine-C object"
	    -> undefined

	if kind_info.is_defined:
	  if
	    remark.is_defined:
	      !remark string(remark " (" kind_info ")")
	    :
	      !remark kind_info
	if remark.is_defined && name.is_defined:
	  TR:
	    TD "align" = "right" name .until. "::"
	    TD: A "href" = "@(name.mangled).html" name .behind. "::"
	    TD "class" = "remark" remark

  for_each definitions: (_iname info)
    $name name_of(info)
    create_info_page name info
    case kind_of(info) INLINE_C_TYPE:
      for_each methods_of(info): (method_name method_info)
	create_info_page string(name "/" method_name) method_info

  create_page "html/topic_index.html":
    link_bar
    H1 "id" = "index" "Topic Index"
    TABLE:
      for_each topics: (topic _references)
	$filename string(replace_all(topic.to_lower_case ' ' = "_") ".html")
	TR: TD: A "href" = filename topic
  for_each topics: (topic references)
    $filename replace_all(topic.to_lower_case ' ' = "_")
    create_page "html/@(filename).html":
      link_bar
      H1 "id" = "index" topic
      TABLE:
	for_each references: (reference)
	  TR:
	    TD: A "href" = string(reference.mangled ".html") reference
	    TD "&nbsp;"
	    TD short_descriptions(reference)
  create_page "html/index.html":
    H1 "Simplicity"
    P: A "href" = "manual.html" "Manual"
    P: A "href" = "type_index.html" "Type Index"
    P: A "href" = "symbol_index.html" "Symbol Index"
    P: A "href" = "topic_index.html" "Topic Index"

  if do_print_summary:
    $$total_functions 0
    $$total_polymorphic_functions 0
    $$total_polymorphic_attributes 0
    $$total_methods 0
    $$total_inline_c_methods 0
    $$total_inline_c_types 0
    $$total_inline_c_objects 0
    $$total_attributes 0
    $$total_inline_c_functions 0
    $$total_unique_items 0
    $$total_constants 0
    $$total_variables 0
    $$other 0

    for_each definitions: (_iname info)
      case kind_of(info)
	FUNCTION: inc &total_functions
	POLYMORPHIC_FUNCTION: inc &total_polymorphic_functions
	POLYMORPHIC_ATTRIBUTE: inc &total_polymorphic_attributes
	INLINE_C_FUNCTION: inc &total_inline_c_functions
	INLINE_C_TYPE: inc &total_inline_c_types
	INLINE_C_OBJECT: inc &total_inline_c_objects
	UNIQUE_ITEM: inc &total_unique_items
	CONSTANT: inc &total_constants
	VARIABLE: inc &total_variables
	: inc &other
      case kind_of(info) INLINE_C_TYPE:
	for_each methods_of(info): (method_name method_info)
	  case kind_of(method_info)
	    FUNCTION: inc &total_methods
	    INLINE_C_FUNCTION: inc &total_inline_c_methods
	    : inc &total_attributes

    $total_definitions
      +
	total_functions
	total_polymorphic_functions
	total_polymorphic_attributes
	total_methods
	total_inline_c_methods
	total_inline_c_types
	total_inline_c_objects
	total_attributes
	total_inline_c_functions
	total_unique_items
	total_constants
	total_variables

    ewrite "
      total definitions:     @(pad_left(total_definitions 5))

      functions:             @(pad_left(total_functions 5))
      polymorphic functions: @(pad_left(total_polymorphic_functions 5))
      polymorphic attributes:@(pad_left(total_polymorphic_attributes 5))
      method definitions:    @(pad_left(total_methods 5))
      inline C methods:      @(pad_left(total_inline_c_methods 5))
      attribute definitions: @(pad_left(total_attributes 5))
      inline C functions:    @(pad_left(total_inline_c_functions 5))
      inline C types:        @(pad_left(total_inline_c_types 5))
      inline C objects:      @(pad_left(total_inline_c_objects 5))
      unique items:          @(pad_left(total_unique_items 5))
      other constants:       @(pad_left(total_constants 5))
      variables:             @(pad_left(total_variables 5))

      other:                 @(pad_left(other 5))
